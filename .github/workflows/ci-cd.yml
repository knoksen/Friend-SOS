name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
  test-client:
    runs-on: ubuntu-latest
    name: Test Client Application
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Run Tests
        run: npm test
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      
      - name: Upload Test Coverage
        uses: actions/upload-artifact@v3
        with:
          name: client-coverage
          path: coverage/

  test-server:
    runs-on: ubuntu-latest
    name: Test Push Notification Server
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      
      - name: Install Server Dependencies
        working-directory: server
        run: npm ci
      
      - name: Generate VAPID Keys
        working-directory: server
        run: npm run generate-vapid
      
      - name: Run Server Tests
        working-directory: server
        run: npm run test:coverage
      
      - name: Upload Server Test Coverage
        uses: actions/upload-artifact@v3
        with:
          name: server-coverage
          path: server/coverage/

  build:
    needs: [test-client, test-server]
    runs-on: ubuntu-latest
    name: Build Application
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install Dependencies
        run: |
          npm ci
          cd server && npm ci
      
      - name: Build Client
        run: npm run build
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          VITE_VAPID_PUBLIC_KEY: ${{ secrets.VAPID_PUBLIC_KEY }}
      
      - name: Build Server
        working-directory: server
        run: npm run build
      
      - name: Upload Client Build
        uses: actions/upload-artifact@v3
        with:
          name: client-build
          path: dist/
      
      - name: Upload Server Build
        uses: actions/upload-artifact@v3
        with:
          name: server-build
          path: server/dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    name: Deploy to Production
    environment: production
    
    steps:
      - name: Download Client Build
        uses: actions/download-artifact@v3
        with:
          name: client-build
          path: dist
      
      - name: Download Server Build
        uses: actions/download-artifact@v3
        with:
          name: server-build
          path: server/dist
          
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          cname: ${{ secrets.CUSTOM_DOMAIN }}
      
      - name: Deploy Server to Azure
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: server/dist
          
      - name: Verify Client Deployment
        run: |
          echo "Verifying client deployment..."
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.CLIENT_URL }})
          if [ $response -ne 200 ]; then
            echo "Client deployment verification failed with status code: $response"
            exit 1
          fi
          echo "Client deployment verified successfully!"
          
      - name: Verify Server Deployment
        run: |
          echo "Verifying server deployment..."
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.SERVER_URL }}/health)
          if [ $response -ne 200 ]; then
            echo "Server deployment verification failed with status code: $response"
            exit 1
          fi
          echo "Server deployment verified successfully!"
          
      - name: Configure DNS and SSL (if needed)
        run: |
          if [ ! -z "${{ secrets.AZURE_DNS_NAME }}" ]; then
            echo "Configuring custom domain and SSL..."
            az webapp config hostname add --webapp-name ${{ secrets.AZURE_WEBAPP_NAME }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --hostname ${{ secrets.AZURE_DNS_NAME }}
            
            az webapp config ssl bind --certificate-thumbprint ${{ secrets.SSL_CERT_THUMBPRINT }} \
              --ssl-type SNI --name ${{ secrets.AZURE_WEBAPP_NAME }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}
          fi
